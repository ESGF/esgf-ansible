
- name: Install publisher required libraries
  package:
    name:
      - libxml2
      - libxml2-devel
      - libxslt
      - libxslt-devel
      - gcc

# Create a simple environment for esgsetup only
- name: Check for esgsetup-env
  stat:
    path: "{{ conda.envs }}/esgsetup-env"
  register: esgsetup_result

- name: Create esgsetup-env if it does not exist
  when: not esgsetup_result.stat.exists
  command: "{{ conda.exe }} create -y -n esgsetup_env 'python<3'"

- name: Install publisher for esgsetup
  shell: >
    {{ conda.actv }} esgsetup-env && \
    pip install '{{ publisher.pip.name }}' 'requests==2.20.0'

# Perform esgsetup steps
- name: Run esgsetup for config files
  shell: >
    {{ conda.actv }} esgsetup-env && \
    esgsetup --config --minimal-setup --rootid {{ ansible_fqdn.split('.', 1)[-1] }}
  args:
    creates: "{{ esg.config.dir }}/esgcet/esg.ini"
  environment:
    UVCDAT_ANONYMOUS_LOG: no

- name: Insert publisher password into esg.ini
  no_log: true
  replace:
    path: "{{ esg.config.dir }}/esgcet/esg.ini"
    regexp: 'esgcetpass'
    replace: "{{ admin_pass }}"

- name: Insert publisher host into esg.ini
  replace:
    path: "{{ esg.config.dir }}/esgcet/esg.ini"
    regexp: 'host.sample.gov'
    replace: '{{ ansible_fqdn }}'

- name: Run esgsetup for the database
  no_log: true
  shell: >
    {{ conda.actv }} esgsetup-env && \
    esgsetup --db --minimal-setup \
    --db-name {{ all_db.db }} \
    --db-admin {{ all_db.users.super.name }} \
    --db-admin-password {{ all_db.users.super.pass }} \
    --db-user {{ data_db.users.pub.name }} \
    --db-user-password {{ data_db.users.pub.pass }} \
    --db-host {{ all_db.host }} \
    --db-port {{ all_db.port }}
  environment:
    UVCDAT_ANONYMOUS_LOG: no

- name: Run esginitialize
  shell: >
    {{ conda.actv }} esgsetup-env && \
    esginitialize -c
  environment:
    UVCDAT_ANONYMOUS_LOG: no

- name: Create test publication data directory
  file:
    path: /esg/data/test
    state: directory

# Configure publisher with thredds
- name: Run esgsetup for thredds
  no_log: true
  shell: >
    {{ conda.actv }} esgsetup-env && \
    esgsetup --config --minimal-setup \
    --thredds --publish --gateway {{ groups['index'][0] }} \
    --thredds-password {{ admin_pass }}
  environment:
    UVCDAT_ANONYMOUS_LOG: no

- name: Retrieve info about what datasets to mount
  fetch:
    src: "{{ esg.config.dir }}/esgcet/esg.ini"
    dest: /tmp/
    flat: yes

- name: Read datasets from esg.ini
  set_fact:
    raw_dataset_roots: "{{ lookup('ini', 'thredds_dataset_roots section=DEFAULT file=/tmp/esg.ini') }}"

- name: Mount the dataset root directories into the chroot GridFTP
  mount:
    path: "{{ gridftp.chroot }}/{{ item.split('|')[0].strip() }}"
    src: "{{ item.split('|')[1].strip() }}"
    opts: rw,bind
    fstype: gpfs
    state: mounted
  with_items: "{{ raw_dataset_roots.split('\n')[1:] }}"


# Create actual publishing environment
- name: Check for correct esgf-publisher
  stat:
    path: "{{ conda.envs }}/esgf-pub/{{ conda.mods }}/esgcet-{{ publisher.pip.version }}.dist-info"
  register: publisher_module

- name: Cleanup publisher repo
  when: not publisher_module.stat.exists
  command: "{{ conda.exe }} env remove -y -n esgf-pub"
  register: remove_esgfpub
  failed_when: remove_esgfpub.rc != 0 and "Not a conda environment" not in remove_esgfpub.stderr

- name: Create esgf-pub conda env
  when: not publisher_module.stat.exists
  command: "{{ conda.exe }} create -y -n esgf-pub 'python<3'"

- name: Install CMOR into esgf-pub
  when: not publisher_module.stat.exists
  command: "{{ conda.exe }} install -y -n esgf-pub 'cmor==3.4.0' -c conda-forge"

- name: Install publisher
  when: not publisher_module.stat.exists
  shell: >
    {{ conda.actv }} esgf-pub && \
    pip install '{{ publisher.pip.name }}' 'requests==2.20.0'