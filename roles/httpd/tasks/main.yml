# Ensure httpd Webserver is installed
- name: Ensure the apache webserver installed
  package:
    name:
      - "{{ pkgs.apache }}"
      - mod_ssl
      - mod_security
      - mod_security_crs

- name: Install mod_security.conf
  template:
    src: mod_security.conf
    dest: /etc/httpd/conf.d/mod_security.conf

- name: Install robots.txt
  template:
    src: robots.txt
    dest: /var/www/html/robots.txt

# Create config dirs
- name: Create esgf-proxy configuration directories
  file:
    path: "{{ item }}"
    state: directory
  loop:
    - "{{ httpd.proxy_dir }}"
    - "{{ httpd.ssl_proxy_dir }}"

- name: Configure firewalld for http and https
  when: is_7 and (configure_centos7_firewalld is defined and configure_centos7_firewalld)
  firewalld:
    service: "{{ item }}"
    permanent: yes
    immediate: yes
    state: enabled
  loop:
    - http
    - https

- name: Configure iptables for http and https
  when: is_6 and (configure_centos6_iptables is defined and configure_centos6_iptables)
  iptables:
    chain: INPUT
    destination_port: "{{ item }}"
    jump: ACCEPT
    protocol: tcp
    match: tcp
    action: insert
    rule_num: 5
  register: iptables_conf
  loop:
    - 80
    - 443

- name: Save iptables change
  when: is_6 and (configure_centos6_iptables is defined and configure_centos6_iptables) and iptables_conf is changed
  command: "service iptables save"
  args:
    warn: no

# Begin setting up certificates for httpd
- name: Create cert dir
  file:
    path: "{{ httpd.cert_dir }}"
    state: directory

- name: Get Trusted Certificates
  when: trusted_certs is not defined
  get_url:
    url: "{{ httpd.trusted_ca.url }}"
    dest: "{{ httpd.cabundle }}"

- name: Copy {{ trusted_certs }} into place
  when: trusted_certs is defined
  get_url:
    url: "{{ trusted_certs }}"
    dest: "{{ httpd.cabundle }}"

# Install self-signed certificate as CA, if generated
- name: Copy self-signed web CA chain into place
  when: hostkey_src is not defined and (try_letsencrypt is not defined or not try_letsencrypt)
  copy:
    remote_src: yes
    src: "{{ httpd.hostcert }}"
    dest: "{{ httpd.cachain }}"

# Install base HTTPD config file
- name: Install HTTPD Config
  template:
    src: "httpd{{ httpd_version }}/esgf-httpd.conf.j2"
    dest: /etc/httpd/conf/httpd.conf

# Handle legacy use of esgf-httpd.conf
- name: Check for legacy esgf-httpd.conf
  stat:
    path: /etc/httpd/conf/esgf-httpd.conf
  register: esgf_httpd

- name: Create backup of legacy esgf-httpd.conf
  when: esgf_httpd.stat.exists and not esgf_httpd.stat.islnk
  copy:
    remote_src: yes
    src: /etc/httpd/conf/esgf-httpd.conf
    dest: /etc/httpd/conf/esgf-httpd.conf.bak

- name: Create symlink of legacy esgf-httpd.conf
  file:
    src: /etc/httpd/conf/httpd.conf
    dest: /etc/httpd/conf/esgf-httpd.conf
    state: link
    force: yes

# Get a cert from LetsEncrypt if credentials are not provided
- name: Install LetsEncrypt Certs
  when: hostkey_src is not defined and try_letsencrypt is defined and try_letsencrypt
  import_tasks: letsencrypt.yml

# Copy credentials into place, if provided
- name: Copy web hostkey into place
  when: hostkey_src is defined
  copy:
    remote_src: yes
    src: "{{ hostkey_src }}"
    dest: "{{ httpd.hostkey }}"

- name: Copy web hostcert into place
  when: hostcert_src is defined
  copy:
    remote_src: yes
    src: "{{ hostcert_src }}"
    dest: "{{ httpd.hostcert }}"

- name: Copy web CA chain into place
  when: cachain_src is defined
  copy:
    remote_src: yes
    src: "{{ cachain_src }}"
    dest: "{{ httpd.cachain }}"

# Setup additional SSL config
- name: Install HTTPS config
  template:
    src: "httpd{{ httpd_version }}/esgf-httpd.ssl.conf.j2"
    dest: /etc/httpd/conf/httpd.ssl.conf