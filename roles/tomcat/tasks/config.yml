
- name: Create esg tomcat config directory
  file:
    path: "{{ esg.config.dir }}/tomcat"
    state: directory

- name: Get trusted certificates
  get_url:
    url: "{{ tomcat.ts.url }}"
    dest: "{{ tomcat.ts.path }}"

- name: Import CA to Truststore
  java_cert:
    cert_path: "{{ httpd.cachain }}"
    keystore_path: "{{ tomcat.ts.path }}"
    keystore_pass: "{{ tomcat.ts.pass }}"
    cert_alias: my_esgf_node 
    executable: "{{ java.path }}/bin/keytool"

- name: Create Keystore
  when: hostkey_src is defined
  java_keystore:
    private_key: "{{ lookup('file', hostkey_src) }}"
    certificate: "{{ lookup('file', hostcert_src) }}"
    name: my_esgf_node 
    dest: "{{ tomcat.ks.path }}"
    password: "{{ tomcat.ks.pass }}"
  environment:
    PATH: "{{ lookup('env', 'PATH') }}:{{ java.path }}/bin"

- name: Create Keystore
  when: hostkey_src is not defined
  java_keystore:
    private_key: "{{ lookup('file', '/tmp/tempcerts/host.pem') }}"
    certificate: "{{ lookup('file', '/tmp/tempcerts/host.crt') }}"
    name: my_esgf_node 
    dest: "{{ tomcat.ks.path }}"
    password: "{{ tomcat.ks.pass }}"
  environment:
    PATH: "{{ lookup('env', 'PATH') }}:{{ java.path }}/bin"

- name: Install server.xml
  template:
    src: server.xml.j2
    dest: "{{ tomcat.path }}/conf/server.xml"

- name: Install setenv.sh
  template:
    src: setenv.sh.j2
    dest: "{{ tomcat.path }}/bin/setenv.sh"

- name: Install tomcat-users.xml
  template:
    src: tomcat-users.xml.j2
    dest: "{{ esg.config.dir }}/tomcat/tomcat-users.xml"

- name: Install context.xml
  copy:
    src: context.xml
    dest: "{{ tomcat.path }}/conf/context.xml"