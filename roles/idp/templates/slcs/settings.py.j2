# -*- coding: utf-8 -*-
"""
Django settings for the ESGF SLCS Server.
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

DEBUG = False
# Security settings
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_BROWSER_XSS_FILTER = True
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
CSRF_COOKIE_HTTPONLY = True
X_FRAME_OPTIONS = 'DENY'
ALLOWED_HOSTS = ['localhost']

# Read the secret key from a file
SECRET_KEY_FILE = '{{ slcs.home }}/conf/app/secret_key.txt'
with open(SECRET_KEY_FILE) as f:
    SECRET_KEY = f.read().strip()

# Logging settings
{% if server_email is defined %}
DEFAULT_FROM_EMAIL = SERVER_EMAIL = '{{ server_email }}'
{% else %}
DEFAULT_FROM_EMAIL = SERVER_EMAIL = "sample@org"
{% endif %}

ADMINS = []

LOGGING_CONFIG = None
LOGGING = {
    'version' : 1,
    'disable_existing_loggers' : False,
    'formatters' : {
        'generic' : {
            'format' : '[%(levelname)s] [%(asctime)s] [%(name)s:%(lineno)s] [%(threadName)s] %(message)s',
        },
    },
    'handlers' : {
        'stdout' : {
            'class' : 'logging.StreamHandler',
            'formatter' : 'generic',
        },
        'mail_admins' : {
            'class' : 'django.utils.log.AdminEmailHandler',
            'formatter' : 'generic',
            'level' : 'ERROR',
        },
    },
    'loggers' : {
        '' : {
            'handlers' : ['stdout', 'mail_admins'],
            'level' : 'INFO',
            'propogate' : True,
        },
    },
}
import logging.config
logging.config.dictConfig(LOGGING)


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'oauth2_provider',
    'bootstrap3',
]

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'esgf_slcs_server.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'esgf_slcs_server', 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'esgf_slcs_server.wsgi.application'


DATABASES = {
    'default': {
        'ENGINE' : 'django.db.backends.postgresql',
        'NAME' : 'slcsdb',
        'HOST' : '{{ all_db.host }}',
        'PORT' : '{{ all_db.port }}',
        'USER' : '{{ all_db.users.super.name }}',
    },
    'userdb' : {
        'ENGINE' : 'django.db.backends.postgresql',
        'NAME' : '{{ all_db.db }}',
        'HOST' : '{{ all_db.host }}',
        'PORT' : '{{ all_db.port }}',
        'USER' : '{{ all_db.users.super.name }}',
    },
}

ESGF_SLCSDB_PASSWD_FILE = '{{ slcs.home }}/conf/app/slcsdb_passwd.txt'
with open(ESGF_SLCSDB_PASSWD_FILE) as f:
    DATABASES['default']['PASSWORD'] = f.read().strip()

ESGF_USERDB_PASSWD_FILE = '{{ slcs.home }}/conf/app/userdb_passwd.txt'
with open(ESGF_USERDB_PASSWD_FILE) as f:
    DATABASES['userdb']['PASSWORD'] = f.read().strip()


ESGF_USERDB_USER_SCHEMA = "esgf_security"
ESGF_USERDB_USER_TABLE = "user"

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTHENTICATION_BACKENDS = [
    'oauth2_provider.backends.OAuth2Backend',
    'esgf_auth.backend.EsgfUserBackend'
]

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


STATIC_URL = '/esgf-slcs/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'esgf_slcs_server', 'static')]
STATIC_ROOT = '{{ slcs.static }}'


# URLs for login/logout
LOGIN_URL = 'accounts_login'
LOGOUT_URL = 'accounts_logout'
LOGIN_REDIRECT_URL = 'home'

BOOTSTRAP3 = {
    'success_css_class': '',
}


# OAuth provider configuration
CERTIFICATE_SCOPE = 'https://{{ hostname.self }}/esgf-slcs/oauth/certificate/'
OAUTH2_PROVIDER = {
    'SCOPES' : {
        CERTIFICATE_SCOPE : 'Obtain short-lived certificate for user',
    },
    'DEFAULT_SCOPES' : [CERTIFICATE_SCOPE],
}

BASIC_AUTH_REALM = 'esgf.llnl.gov'


# OnlineCA settings
ONLINECA = {
    'TRUSTROOTS_DIR': '{{ grid_security.cert_dir }}',
    'USER_TO_STRING_MAPPER': 'esgf_auth.openid.django_user_to_openid',
    'SUBJECT_NAME_TEMPLATE': '/DC=esgf/CN={user}',
    'CA_CERT_PATH': '{{ myproxy.ca.cert }}',
    'CA_KEY_PATH': '{{ myproxy.ca.key }}',
    {% if onlineca_cacert_chain_filepaths is defined %}
    'CA_CERT_CHAIN_PATHS': [
        {% for path in onlineca_cacert_chain_filepaths %}
        '{{ path }}',
        {% endfor %}
    ],
    {% endif %}
}
